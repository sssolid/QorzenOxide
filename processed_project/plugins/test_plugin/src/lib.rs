use qorzen_oxide::plugin::*;use qorzen_oxide::{auth::{Permission,PermissionScope},error::{Error,Result},event::Event,config::SettingsSchema,};use async_trait::async_trait;pub struct TestPlugin{context:Option<PluginContext>,}impl std::fmt::Debug for TestPlugin{fn fmt(&self,f:&mut std::fmt::Formatter<'_>)->std::fmt::Result{f.debug_struct("TestPlugin").finish()}}impl TestPlugin{pub fn new()->Self{Self{context:None}}}impl Default for TestPlugin{fn default()->Self{Self::new()}}#[cfg_attr(not(target_arch="wasm32"),async_trait)]#[cfg_attr(target_arch="wasm32",async_trait(?Send))]impl Plugin for TestPlugin{fn info(&self)->PluginInfo{PluginInfo{id:"test_plugin".to_string(),name:"Test Plugin".to_string(),version:"1.0.0".to_string(),description:"A simple test plugin".to_string(),author:"Test Autho__STRING_LITERAL_0__MIT".to_string(),homepage:None,repository:None,minimum_core_version:"0.1.0".to_string(),supported_platforms:vec![Platform::All],}}fn required_dependencies(&self)->Vec<PluginDependency>{vec![]}fn required_permissions(&self)->Vec<Permission>{vec![Permission{resource:"ui".to_string(),action:"rende__STRING_LITERAL_1__Test plugin initializing");self.context=Some(context);tracing::info!("Test plugin initialized successfully");Ok(())}async fn shutdown(&mut self)->Result<()>{tracing::info!("Test plugin shutting down");Ok(())}fn ui_components(&self)->Vec<UIComponent>{vec![UIComponent{id:"test_component".to_string(),name:"Test Component".to_string(),component_type:ComponentType::Widget,props:serde_json::json!({}),required_permissions:vec![],}]}fn menu_items(&self)->Vec<MenuItem>{vec![MenuItem{id:"test_menu".to_string(),label:"Test Plugin".to_string(),icon:Some("ðŸ§ª".to_string()),route:Some("/test".to_string()),action:None,required_permissions:vec![],order:999,children:vec![],}]}fn settings_schema(&self)->Option<SettingsSchema>{None}fn api_routes(&self)->Vec<ApiRoute>{vec![]}fn event_handlers(&self)->Vec<EventHandler>{vec![]}fn render_component(&self,component_id:&str,_props:serde_json::Value)->Result<dioxus::prelude::VNode>{use dioxus::prelude::*;match component_id{"test_component"=>{let node=rsx!{div{class:"test-plugin",h2{"ðŸ§ª Test Plugin"}p{"This is a test plugin that works!"}div{class:"bg-green-100 p-4 rounded","âœ… Plugin loaded successfully"}}};Ok(VNode::from(node))}_=>Err(Error::plugin("test_plugin","Unknown component")),}}async fn handle_api_request(&self,_route_id:&str,_request:ApiRequest)->Result<ApiResponse>{Err(Error::plugin("test_plugin","No API routes"))}async fn handle_event(&self,_handler_id:&str,_event:&dyn Event)->Result<()>{Ok(())}}#[macro_use]extern crate qorzen_oxide;export_plugin!(TestPlugin);
