use std::collections::HashMap;use std::sync::Arc;use crate::utils::Time;use async_trait::async_trait;use chrono::{DateTime,Utc};use serde::{Deserialize,Serialize};use tokio::sync::{mpsc,RwLock};use tracing::{Event,Subscriber};use tracing_appender::non_blocking::WorkerGuard;use tracing_subscriber::layer::Identity;use tracing_subscriber::{fmt,layer::SubscriberExt,util::SubscriberInitExt,EnvFilter,Layer,Registry,};use uuid::Uuid;use crate::config::{LogFormat,LoggingConfig};use crate::error::{Error,ErrorKind,Result,ResultExt};use crate::manager::{ManagedState,Manager,ManagerStatus};#[derive(Debug,Clone,Serialize,Deserialize)]pub struct LogEntry{pub id:Uuid,pub level:LogLevel,pub timestamp:DateTime<Utc>,pub source:String,pub message:String,pub target:String,pub file:Option<String>,pub line:Option<u32>,pub correlation_id:Option<Uuid>,pub fields:HashMap<String,serde_json::Value>,pub span:Option<SpanInfo>,}#[derive(Debug,Clone,Serialize,Deserialize)]pub struct SpanInfo{pub id:String,pub parent_id:Option<String>,pub name:String,pub fields:HashMap<String,serde_json::Value>,}#[derive(Debug,Clone,Copy,PartialEq,Eq,PartialOrd,Ord,Hash,Serialize,Deserialize)]pub enum LogLevel{Trace,Debug,Info,Warn,Error,}impl From<tracing::Level>for LogLevel{fn from(level:tracing::Level)->Self{match level{tracing::Level::TRACE=>Self::Trace,tracing::Level::DEBUG=>Self::Debug,tracing::Level::INFO=>Self::Info,tracing::Level::WARN=>Self::Warn,tracing::Level::ERROR=>Self::Error,}}}impl From<LogLevel>for tracing::Level{fn from(level:LogLevel)->Self{match level{LogLevel::Trace=>Self::TRACE,LogLevel::Debug=>Self::DEBUG,LogLevel::Info=>Self::INFO,LogLevel::Warn=>Self::WARN,LogLevel::Error=>Self::ERROR,}}}#[derive(Debug,Clone,Serialize,Deserialize)]pub struct LogStats{pub total_entries:u64,pub entries_by_level:HashMap<LogLevel,u64>,pub avg_entries_per_second:f64,pub current_file_size:u64,pub rotated_files:u32,pub last_rotation:Option<DateTime<Utc>>,}#[async_trait]pub trait LogWriter:Send +Sync +std::fmt::Debug{async fn write(&self,entry:&LogEntry)->Result<()>;async fn flush(&self)->Result<()>;async fn close(&self)->Result<()>;}#[derive(Debug)]pub struct DatabaseLogWriter{table_name:String,}impl DatabaseLogWriter{pub fn new(table_name:impl Into<String>)->Self{Self{table_name:table_name.into(),}}}#[async_trait]impl LogWriter for DatabaseLogWriter{async fn write(&self,entry:&LogEntry)->Result<()>{tracing::debug!("Would write log entry to database table: {}",self.table_name);tracing::debug!("Entry: {:?}",entry);Ok(())}async fn flush(&self)->Result<()>{Ok(())}async fn close(&self)->Result<()>{Ok(())}}#[derive(Debug)]pub struct HttpLogWriter{endpoint:String,headers:HashMap<String,String>,client:reqwest::Client,}impl HttpLogWriter{pub fn new(endpoint:impl Into<String>)->Self{Self{endpoint:endpoint.into(),headers:HashMap::new(),client:reqwest::Client::new(),}}pub fn with_header(mut self,key:impl Into<String>,value:impl Into<String>)->Self{self.headers.insert(key.into(),value.into());self}}#[async_trait]impl LogWriter for HttpLogWriter{async fn write(&self,entry:&LogEntry)->Result<()>{let mut request=self.client.post(&self.endpoint);for(key,value)in&self.headers{request=request.header(key,value);}let response=request.json(entry).send().await.with_context(||"Failed to send log entry to HTTP endpoint".to_string())?;if!response.status().is_success(){return Err(Error::new(ErrorKind::Network{status_code:Some(response.status().as_u16()),endpoint:Some(self.endpoint.clone()),},format!("HTTP log writer failed with status: {}",response.status()),));}Ok(())}async fn flush(&self)->Result<()>{Ok(())}async fn close(&self)->Result<()>{Ok(())}}#[derive(Clone,Debug)]struct QorzenLayer{entry_sender:mpsc::UnboundedSender<LogEntry>,stats:Arc<RwLock<LogStats>>,}impl QorzenLayer{fn new(entry_sender:mpsc::UnboundedSender<LogEntry>)->Self{Self{entry_sender,stats:Arc::new(RwLock::new(LogStats{total_entries:0,entries_by_level:HashMap::new(),avg_entries_per_second:0.0,current_file_size:0,rotated_files:0,last_rotation:None,})),}}async fn get_stats(&self)->LogStats{self.stats.read().await.clone()}}impl<S>Layer<S>for QorzenLayer
where
S:Subscriber +for<'lookup>tracing_subscriber::registry::LookupSpan<'lookup>,{fn on_event(&self,event:&Event<'_>,_ctx:tracing_subscriber::layer::Context<'_,S>){let level=LogLevel::from(*event.metadata().level());let entry=LogEntry{id:Uuid::new_v4(),level,timestamp:Time::now(),source:event.metadata().target().to_string(),message:format!("{:?}",event),target:event.metadata().target().to_string(),file:event.metadata().file().map(String::from),line:event.metadata().line(),correlation_id:None,fields:HashMap::new(),span:None,};if self.entry_sender.send(entry).is_err(){eprintln!("Failed to send log entry: receiver dropped");}let stats=self.stats.clone();std::thread::spawn(move||{if let Ok(rt)=tokio::runtime::Handle::try_current(){rt.spawn(async move{let mut stats_guard=stats.write().await;stats_guard.total_entries +=1;*stats_guard.entries_by_level.entry(level).or_insert(0)+=1;});}});}}#[derive(Debug)]pub struct LoggingManager{state:ManagedState,config:LoggingConfig,custom_layer:Option<QorzenLayer>,_guards:Vec<WorkerGuard>,writers:Vec<Arc<dyn LogWriter>>,entry_sender:Option<mpsc::UnboundedSender<LogEntry>>,writer_task_handle:Option<tokio::task::JoinHandle<()>>,}impl LoggingManager{pub fn new(config:LoggingConfig)->Self{Self{state:ManagedState::new(Uuid::new_v4(),"logging_manage__STRING_LITERAL_0__.")),file_config.path.file_name().unwrap_or_else(||std::ffi::OsStr::new("app.log")),);let(non_blocking,guard)=tracing_appender::non_blocking(file_appender);self._guards.push(guard);let file_layer=match self.config.format{LogFormat::Json=>fmt::layer().json().with_writer(non_blocking).boxed(),LogFormat::Pretty=>fmt::layer().pretty().with_writer(non_blocking).boxed(),LogFormat::Compact=>fmt::layer().compact().with_writer(non_blocking).boxed(),};registry.with(file_layer)}else{registry.with(Identity::new().boxed())};let(entry_sender,mut entry_receiver)=mpsc::unbounded_channel::<LogEntry>();let custom_layer=QorzenLayer::new(entry_sender.clone());self.entry_sender=Some(entry_sender);self.custom_layer=Some(custom_layer.clone());let writers=Arc::new(RwLock::new(self.writers.clone()));let writers_clone=Arc::clone(&writers);let writer_task=tokio::spawn(async move{while let Some(entry)=entry_receiver.recv().await{let writers_guard=writers_clone.read().await;for writer in writers_guard.iter(){if let Err(e)=writer.write(&entry).await{eprintln!("Failed to write log entry: {}",e);}}}});self.writer_task_handle=Some(writer_task);let registry=registry.with(custom_layer);registry.try_init().ok();Ok(())}pub async fn add_writer(&mut self,writer:Arc<dyn LogWriter>)->Result<()>{self.writers.push(writer);Ok(())}pub async fn get_stats(&self)->LogStats{if let Some(layer)=&self.custom_layer{layer.get_stats().await}else{LogStats{total_entries:0,entries_by_level:HashMap::new(),avg_entries_per_second:0.0,current_file_size:0,rotated_files:0,last_rotation:None,}}}pub async fn set_log_level(&mut self,level:LogLevel)->Result<()>{tracing::info!("Log level updated to: {:?}",level);Ok(())}pub async fn flush(&self)->Result<()>{for writer in&self.writers{writer
.flush().await
.with_context(||"Failed to flush log write__STRING_LITERAL_1__logging_manage__STRING_LITERAL_2__Failed to create log directory: {}",parent.display())})?;}}self.state
.set_state(crate::manager::ManagerState::Running).await;tracing::info!("Logging manager initialized successfully");Ok(())}async fn shutdown(&mut self)->Result<()>{self.state.set_state(crate::manager::ManagerState::ShuttingDown).await;tracing::info!("Shutting down logging manage__STRING_LITERAL_3__Failed to close log write__STRING_LITERAL_4__total_entries",serde_json::Value::from(stats.total_entries),);status.add_metadata("writers_count",serde_json::Value::from(self.writers.len()));status.add_metadata("file_logging",serde_json::Value::Bool(self.config.file.is_some()),);status.add_metadata("console_logging",serde_json::Value::Bool(self.config.console.enabled),);status.add_metadata("log_level",serde_json::Value::String(self.config.level.clone()),);status}}#[derive(Debug,Clone)]pub struct Logger{component:String,correlation_id:Option<Uuid>,metadata:HashMap<String,serde_json::Value>,}impl Logger{pub fn new(component:String)->Self{Self{component,correlation_id:None,metadata:HashMap::new(),}}pub fn with_correlation_id(mut self,correlation_id:Uuid)->Self{self.correlation_id=Some(correlation_id);self}pub fn with_metadata(mut self,key:impl Into<String>,value:serde_json::Value)->Self{self.metadata.insert(key.into(),value);self}pub fn trace(&self,message:impl AsRef<str>){self.log(LogLevel::Trace,message.as_ref(),&HashMap::new());}pub fn debug(&self,message:impl AsRef<str>){self.log(LogLevel::Debug,message.as_ref(),&HashMap::new());}pub fn info(&self,message:impl AsRef<str>){self.log(LogLevel::Info,message.as_ref(),&HashMap::new());}pub fn warn(&self,message:impl AsRef<str>){self.log(LogLevel::Warn,message.as_ref(),&HashMap::new());}pub fn error(&self,message:impl AsRef<str>){self.log(LogLevel::Error,message.as_ref(),&HashMap::new());}pub fn log_with_fields(&self,level:LogLevel,message:impl AsRef<str>,fields:&HashMap<String,serde_json::Value>,){self.log(level,message.as_ref(),fields);}fn log(&self,level:LogLevel,message:&str,fields:&HashMap<String,serde_json::Value>){let mut all_fields=self.metadata.clone();all_fields.extend(fields.clone());all_fields.insert("component".to_string(),serde_json::Value::String(self.component.clone()),);if let Some(correlation_id)=self.correlation_id{all_fields.insert("correlation_id".to_string(),serde_json::Value::String(correlation_id.to_string()),);}match level{LogLevel::Trace=>tracing::trace!("{}: {}",self.component,message),LogLevel::Debug=>tracing::debug!("{}: {}",self.component,message),LogLevel::Info=>tracing::info!("{}: {}",self.component,message),LogLevel::Warn=>tracing::warn!("{}: {}",self.component,message),LogLevel::Error=>tracing::error!("{}: {}",self.component,message),}}}#[macro_export]macro_rules!log_trace{($logger:expr,$($arg:tt)*)=>{$logger.trace(format!($($arg)*))};}#[macro_export]macro_rules!log_debug{($logger:expr,$($arg:tt)*)=>{$logger.debug(format!($($arg)*))};}#[macro_export]macro_rules!log_info{($logger:expr,$($arg:tt)*)=>{$logger.info(format!($($arg)*))};}#[macro_export]macro_rules!log_warn{($logger:expr,$($arg:tt)*)=>{$logger.warn(format!($($arg)*))};}#[macro_export]macro_rules!log_error{($logger:expr,$($arg:tt)*)=>{$logger.error(format!($($arg)*))};}#[cfg(test)]mod tests{use super::*;use std::sync::atomic::{AtomicU64,Ordering};#[derive(Debug)]struct TestLogWriter{entries:Arc<AtomicU64>,}impl TestLogWriter{fn new()->Self{Self{entries:Arc::new(AtomicU64::new(0)),}}fn get_entry_count(&self)->u64{self.entries.load(Ordering::SeqCst)}}#[async_trait]impl LogWriter for TestLogWriter{async fn write(&self,_entry:&LogEntry)->Result<()>{self.entries.fetch_add(1,Ordering::SeqCst);Ok(())}async fn flush(&self)->Result<()>{Ok(())}async fn close(&self)->Result<()>{Ok(())}}#[tokio::test]async fn test_logging_manager_initialization(){let config=LoggingConfig::default();let mut manager=LoggingManager::new(config);manager.initialize().await.unwrap();let status=manager.status().await;assert_eq!(status.state,crate::manager::ManagerState::Running);manager.shutdown().await.unwrap();}#[tokio::test]async fn test_custom_log_writer(){let config=LoggingConfig::default();let mut manager=LoggingManager::new(config);let test_writer=Arc::new(TestLogWriter::new());manager.add_writer(test_writer.clone()).await.unwrap();manager.initialize().await.unwrap();let logger=manager.create_logger("test_component");logger.info("Test message 1");logger.warn("Test message 2");logger.error("Test message 3");tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;manager.shutdown().await.unwrap();}#[tokio::test]async fn test_logger_with_context(){let logger=Logger::new("test_component".to_string()).with_correlation_id(Uuid::new_v4()).with_metadata("user_id",serde_json::Value::String("12345".to_string()));logger.info("Test message with context");let mut fields=HashMap::new();fields.insert("custom_field".to_string(),serde_json::Value::Number(42.into()),);logger.log_with_fields(LogLevel::Debug,"Message with fields",&fields);}}
