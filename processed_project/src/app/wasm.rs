use std::collections::HashMap;use std::sync::Arc;use std::time::Duration;use serde::{Deserialize,Serialize};use uuid::Uuid;use tokio::sync::RwLock;use crate::auth::{AccountManager,MemorySessionStore,MemoryUserStore,SecurityPolicy,User,UserSession,};use crate::config::{ConfigurationTier,MemoryConfigStore,TieredConfigManager};use crate::error::{Result};use crate::event::EventBusManager;use crate::manager::{HealthStatus,ManagedState,Manager,ManagerState};use crate::platform::PlatformManager;use crate::plugin::{PluginManager,PluginManagerConfig};use crate::ui::UILayoutManager;use crate::ui::services::plugin_service::initialize_plugin_service;use crate::utils::Time;#[derive(Debug,Clone,Copy,PartialEq,Eq,Serialize,Deserialize)]pub enum ApplicationState{Created,Initializing,Running,ShuttingDown,Shutdown,Error,}#[derive(Debug,Clone,Serialize,Deserialize)]pub struct ApplicationHealth{pub status:HealthStatus,pub uptime:Duration,pub managers:HashMap<String,HealthStatus>,pub last_check:f64,pub details:HashMap<String,serde_json::Value>,}#[derive(Debug,Clone,Serialize,Deserialize)]pub struct ApplicationStats{pub version:String,pub started_at:f64,pub uptime:Duration,pub state:ApplicationState,pub manager_count:usize,pub initialized_managers:usize,pub failed_managers:usize,pub memory_usage_bytes:u64,pub cpu_usage_percent:f64,pub system_info:SystemInfo,}#[derive(Debug,Clone,Serialize,Deserialize)]pub struct SystemInfo{pub os_name:String,pub os_version:String,pub arch:String,pub cpu_cores:usize,pub total_memory_bytes:u64,pub available_memory_bytes:u64,pub hostname:String,}impl SystemInfo{pub fn collect()->Self{Self{os_name:"web".to_string(),os_version:"1.0".to_string(),arch:"wasm32".to_string(),cpu_cores:1,total_memory_bytes:0,available_memory_bytes:0,hostname:"localhost".to_string(),}}}pub struct ApplicationCore{state:ManagedState,app_state:ApplicationState,started_at:f64,platform_manager:Option<Arc<PlatformManager>>,config_manager:Option<TieredConfigManager>,event_bus_manager:Option<Arc<EventBusManager>>,account_manager:Option<AccountManager>,plugin_manager:Option<Arc<RwLock<PluginManager>>>,ui_layout_manager:Option<UILayoutManager>,current_user:Option<User>,current_session:Option<UserSession>,system_info:SystemInfo,}impl std::fmt::Debug for ApplicationCore{fn fmt(&self,f:&mut std::fmt::Formatter<'_>)->std::fmt::Result{f.debug_struct("ApplicationCore").field("started_at",&self.started_at).field("app_state",&self.app_state).field("system_info",&self.system_info).finish()}}impl ApplicationCore{pub fn new()->Self{Self{state:ManagedState::new(Uuid::new_v4(),"application_core"),app_state:ApplicationState::Created,started_at:Time::now_millis()as f64,platform_manager:None,config_manager:None,event_bus_manager:None,account_manager:None,plugin_manager:None,ui_layout_manager:None,current_user:None,current_session:None,system_info:SystemInfo::collect(),}}pub fn with_config_file(_config_path:impl AsRef<std::path::Path>)->Self{Self::new()}pub async fn initialize(&mut self)->Result<()>{self.app_state=ApplicationState::Initializing;self.state.set_state(ManagerState::Initializing).await;web_sys::console::log_1(&"Starting Qorzen WASM application initialization".into());if let Err(e)=self.init_platform_manager().await{web_sys::console::error_1(&format!("Platform manager init failed: {}",e).into());self.app_state=ApplicationState::Error;return Err(e);}if let Err(e)=self.init_config_manager().await{web_sys::console::error_1(&format!("Config manager init failed: {}",e).into());self.app_state=ApplicationState::Error;return Err(e);}if let Err(e)=self.init_event_bus_manager().await{web_sys::console::error_1(&format!("Event Bus manager init failed: {}",e).into());self.app_state=ApplicationState::Error;return Err(e);}if let Err(e)=self.init_account_manager().await{web_sys::console::error_1(&format!("Account manager init failed: {}",e).into());self.app_state=ApplicationState::Error;return Err(e);}if let Err(e)=self.init_ui_layout_manager().await{web_sys::console::error_1(&format!("UI Layout manager init failed: {}",e).into());self.app_state=ApplicationState::Error;return Err(e);}if let Err(e)=self.init_plugin_manager().await{web_sys::console::error_1(&format!("Plugin manager init failed: {}",e).into());self.app_state=ApplicationState::Error;return Err(e);}self.app_state=ApplicationState::Running;self.state.set_state(ManagerState::Running).await;web_sys::console::log_1(&"Qorzen WASM application initialization complete".into());Ok(())}async fn init_platform_manager(&mut self)->Result<()>{web_sys::console::log_1(&"Initializing platform manage__STRING_LITERAL_0__Initializing configuration manage__STRING_LITERAL_1__Initializing event bus manage__STRING_LITERAL_2__Initializing account manage__STRING_LITERAL_3__Initializing UI layout manage__STRING_LITERAL_4__Initializing plugin manage__STRING_LITERAL_5__Plugin manager initialized, registering with service".into());let manager_arc=Arc::new(RwLock::new(plugin_manager));initialize_plugin_service(manager_arc.clone()).await;self.plugin_manager=Some(manager_arc);web_sys::console::log_1(&"Plugin manager and service integration complete".into());Ok(())}pub fn get_plugin_manager(&self)->Option<Arc<RwLock<PluginManager>>>{self.plugin_manager.clone()}pub async fn get_plugin_stats(&self)->Option<crate::plugin::PluginStats>{if let Some(ref plugin_manager_arc)=self.plugin_manager{let plugin_manager=plugin_manager_arc.read().await;Some(plugin_manager.get_plugin_stats().await)}else{None}}pub async fn shutdown(&mut self)->Result<()>{self.app_state=ApplicationState::ShuttingDown;self.state.set_state(ManagerState::ShuttingDown).await;web_sys::console::log_1(&"Shutting down Qorzen WASM application".into());if let Some(plugin_manager)=self.plugin_manager.take(){if let Ok(mut manager)=Arc::try_unwrap(plugin_manager){let mut manager=manager.into_inner();let _=manager.shutdown().await;}}if let Some(mut ui_layout_manager)=self.ui_layout_manager.take(){let _=ui_layout_manager.shutdown().await;}if let Some(mut account_manager)=self.account_manager.take(){let _=account_manager.shutdown().await;}if let Some(event_bus_manager)=self.event_bus_manager.take(){if let Ok(mut manager)=Arc::try_unwrap(event_bus_manager){let _=manager.shutdown().await;}}if let Some(mut config_manager)=self.config_manager.take(){let _=config_manager.shutdown().await;}if let Some(platform_manager)=self.platform_manager.take(){if let Ok(mut manager)=Arc::try_unwrap(platform_manager){let _=manager.shutdown().await;}}self.app_state=ApplicationState::Shutdown;self.state.set_state(ManagerState::Shutdown).await;web_sys::console::log_1(&"Qorzen WASM application shutdown complete".into());Ok(())}pub async fn wait_for_shutdown(&self)->Result<()>{Ok(())}pub async fn get_health(&self)->ApplicationHealth{let mut manager_health=HashMap::new();let mut overall_healthy=true;if let Some(platform_manager)=&self.platform_manager{let health=platform_manager.health_check().await;if health!=HealthStatus::Healthy{overall_healthy=false;}manager_health.insert("platform_manage__STRING_LITERAL_6__plugin_manage__STRING_LITERAL_7__application_core"}fn id(&self)->Uuid{self.state.id()}async fn initialize(&mut self)->Result<()>{Ok(())}async fn shutdown(&mut self)->Result<()>{Ok(())}async fn status(&self)->crate::manager::ManagerStatus{let mut status=self.state.status().await;let app_stats=self.get_stats().await;status.add_metadata("app_state",serde_json::Value::String(format!("{:?}",app_stats.state)),);status.add_metadata("uptime_seconds",serde_json::Value::from(app_stats.uptime.as_secs()),);status.add_metadata("manager_count",serde_json::Value::from(app_stats.manager_count),);status.add_metadata("version",serde_json::Value::String(app_stats.version));status}async fn health_check(&self)->HealthStatus{let health=self.get_health().await;health.status}}#[cfg(test)]mod tests{use super::*;#[tokio::test]async fn test_wasm_application_lifecycle(){let mut app=ApplicationCore::new();assert_eq!(app.get_state().await,ApplicationState::Created);assert!(app.get_stats().await.version==crate::VERSION);}#[test]fn test_system_info(){let info=SystemInfo::collect();assert_eq!(info.os_name,"web");assert_eq!(info.arch,"wasm32");}}
