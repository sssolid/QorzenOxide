use dioxus::prelude::*;#[component]pub fn PluginManagerProvider(children:Element)->Element{#[cfg(not(target_arch="wasm32"))]{let plugin_manager_ready=use_signal(||false);use_effect({let mut plugin_manager_ready=plugin_manager_ready;move||{spawn(async move{tokio::time::sleep(std::time::Duration::from_millis(500)).await;plugin_manager_ready.set(true);tracing::debug!("Plugin manager provider marked as ready");});}});use_context_provider(||plugin_manager_ready);}#[cfg(target_arch="wasm32")]{let plugin_manager_ready=use_signal(||true);use_context_provider(||plugin_manager_ready);}rsx!{{children}}}pub fn use_plugin_manager_ready()->bool{#[cfg(not(target_arch="wasm32"))]{if let Some(ready_signal)=try_use_context::<Signal<bool>>(){ready_signal()}else{false}}#[cfg(target_arch="wasm32")]{if let Some(ready_signal)=try_use_context::<Signal<bool>>(){ready_signal()}else{true}}}#[cfg(test)]mod tests{use super::*;#[test]fn test_plugin_manager_provider_creation(){let _provider=rsx!{PluginManagerProvider{div{"Test content"}}};}}
