use crate::error::Result;use serde::{Deserialize,Serialize};use std::collections::HashMap;use std::sync::Arc;#[derive(Debug,Clone,Serialize,Deserialize)]pub struct QueryResult{pub rows_affected:u64,pub last_insert_id:Option<i64>,}#[derive(Debug,Clone,Serialize,Deserialize)]pub struct Row{pub columns:HashMap<String,serde_json::Value>,}pub struct Transaction{}#[derive(Debug,Clone,Serialize,Deserialize)]pub struct Migration{pub version:u32,pub description:String,pub up_sql:String,pub down_sql:String,}pub trait DatabaseBounds:Send +Sync +std::fmt::Debug{}pub type DynDatabase=dyn DatabaseProvider;pub type DatabaseArc=Arc<DynDatabase>;#[cfg_attr(not(target_arch="wasm32"),async_trait::async_trait)]#[cfg_attr(target_arch="wasm32",async_trait::async_trait(?Send))]pub trait DatabaseProvider:DatabaseBounds{async fn execute(&self,query:&str,params:&[serde_json::Value])->Result<QueryResult>;async fn query(&self,query:&str,params:&[serde_json::Value])->Result<Vec<Row>>;async fn migrate(&self,migrations:&[Migration])->Result<()>;}
