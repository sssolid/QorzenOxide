[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"
[project]
name = "rust-source-stripper"
version = "1.0.0"
description = "Strip Rust source code for AI processing optimization"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
 {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
 "Development Status :: 4 - Beta",
 "Intended Audience :: Developers",
 "License :: OSI Approved :: MIT License",
 "Programming Language :: Python :: 3",
 "Programming Language :: Python :: 3.11",
 "Programming Language :: Python :: 3.12",
 "Topic :: Software Development :: Code Generators",
 "Topic :: Text Processing :: Filters",
]
dependencies = [
 "pydantic>=2.0.0,<3.0.0",
 "structlog>=23.0.0,<24.0.0",
]
[project.optional-dependencies]
dev = [
 "mypy>=1.5.0,<2.0.0",
 "types-setuptools>=68.0.0",
 "black>=23.0.0,<24.0.0",
 "ruff>=0.0.287,<1.0.0",
 "isort>=5.12.0,<6.0.0",
 "pytest>=7.4.0,<8.0.0",
 "pytest-cov>=4.1.0,<5.0.0",
 "hypothesis>=6.82.0,<7.0.0",
]
[project.scripts]
strip-rust-source = "scripts.strip_rust_source:main"
[tool.setuptools.packages.find]
where = ["."]
include = ["scripts*"]
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
 # directories
 \.eggs
 | \.git
 | \.hg
 | \.mypy_cache
 | \.tox
 | \.venv
 | build
 | dist
)/
'''
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["scripts"]
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
 "E", # pycodestyle errors
 "W", # pycodestyle warnings
 "F", # pyflakes
 "I", # isort
 "C", # flake8-comprehensions
 "B", # flake8-bugbear
 "UP", # pyupgrade
]
ignore = [
 "E501", # line too long, handled by black
 "B008", # do not perform function calls in argument defaults
 "C901", # too complex
]
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
[[tool.mypy.overrides]]
module = "structlog.*"
ignore_missing_imports = true
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
[tool.coverage.run]
source = ["scripts"]
omit = ["*/tests/*", "*/test_*"]
[tool.coverage.report]
exclude_lines = [
 "pragma: no cover",
 "def __repr__",
 "if self.debug:",
 "if settings.DEBUG",
 "raise AssertionError",
 "raise NotImplementedError",
 "if 0:",
 "if __name__ == .__main__.:",
 "class .*\\bProtocol\\):",
 "@(abc\\.)?abstractmethod",
]
